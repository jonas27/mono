// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: vocab.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VocabServiceClient is the client API for VocabService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VocabServiceClient interface {
	ListVocabs(ctx context.Context, in *VocabListRequest, opts ...grpc.CallOption) (VocabService_ListVocabsClient, error)
}

type vocabServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVocabServiceClient(cc grpc.ClientConnInterface) VocabServiceClient {
	return &vocabServiceClient{cc}
}

func (c *vocabServiceClient) ListVocabs(ctx context.Context, in *VocabListRequest, opts ...grpc.CallOption) (VocabService_ListVocabsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VocabService_ServiceDesc.Streams[0], "/vocab.VocabService/ListVocabs", opts...)
	if err != nil {
		return nil, err
	}
	x := &vocabServiceListVocabsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VocabService_ListVocabsClient interface {
	Recv() (*VocabListResponse, error)
	grpc.ClientStream
}

type vocabServiceListVocabsClient struct {
	grpc.ClientStream
}

func (x *vocabServiceListVocabsClient) Recv() (*VocabListResponse, error) {
	m := new(VocabListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VocabServiceServer is the server API for VocabService service.
// All implementations must embed UnimplementedVocabServiceServer
// for forward compatibility
type VocabServiceServer interface {
	ListVocabs(*VocabListRequest, VocabService_ListVocabsServer) error
	mustEmbedUnimplementedVocabServiceServer()
}

// UnimplementedVocabServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVocabServiceServer struct {
}

func (UnimplementedVocabServiceServer) ListVocabs(*VocabListRequest, VocabService_ListVocabsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVocabs not implemented")
}
func (UnimplementedVocabServiceServer) mustEmbedUnimplementedVocabServiceServer() {}

// UnsafeVocabServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VocabServiceServer will
// result in compilation errors.
type UnsafeVocabServiceServer interface {
	mustEmbedUnimplementedVocabServiceServer()
}

func RegisterVocabServiceServer(s grpc.ServiceRegistrar, srv VocabServiceServer) {
	s.RegisterService(&VocabService_ServiceDesc, srv)
}

func _VocabService_ListVocabs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VocabListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VocabServiceServer).ListVocabs(m, &vocabServiceListVocabsServer{stream})
}

type VocabService_ListVocabsServer interface {
	Send(*VocabListResponse) error
	grpc.ServerStream
}

type vocabServiceListVocabsServer struct {
	grpc.ServerStream
}

func (x *vocabServiceListVocabsServer) Send(m *VocabListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VocabService_ServiceDesc is the grpc.ServiceDesc for VocabService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VocabService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vocab.VocabService",
	HandlerType: (*VocabServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVocabs",
			Handler:       _VocabService_ListVocabs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vocab.proto",
}
